#
#   API for SmartMeals
#

openapi: "3.0.3"

info:
  description: backend
  version: 0.1.0
  title: SmartMeals

servers:
  - url: http://localhost:3010/v0

paths:
  /switchOut:
    get:
      description: returns subsitutions given ingredient
      parameters:
        - in: query
          name: ingredient
          schema:
            type: string
          required: true
          description: ingredient to check swaps of
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/swap'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /publicMeal:
    get:
      description: returns user query
      parameters:
        - in: query
          name: mealName
          schema:
            type: string
          required: true
          description: what the user gives
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/recipes'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /userSearch:
    get:
      description: returns user query
      parameters:
        - in: query
          name: userInput
          schema:
            type: string
          required: true
          description: what the user gives
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/returnMeal'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /mealWeek:
    get:
      description: returns full week of food
      parameters:
        - in: query
          name: mealsid
          schema:
            type: integer
          required: true
          description: mealsid
        - in: query
          name: dayof
          schema:
            type: string
          required: true
          description: day
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/putMealToUser'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'


  /login:
    post:
      description: login
      requestBody:
        description: Request Body
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Credentials'
      responses:
        200:
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /signup:
    post:
      description: signup
      requestBody:
        description: Request Body
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Credentials'
      responses:
        201:
          description: created response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /recipe:
    get:
      security:
        - bearerAuth: []
      description: returns one recipe
      parameters:
        - in: query
          name: recipeid
          schema:
            type: string
          required: true
          description: returns one recipe
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/recipe'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /recipes:
    get:
      security:
        - bearerAuth: []
      description: returns all recipes
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/recipes'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    post:
      description: creates a recipe
      requestBody:
        description: recipe to create
        required: true
        content:
          application/json:
            schema:
              $ref: '#components/schemas/recipesPost'
      responses:
        201:
          description: recipe to create
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/recipesJson'
        400:
          description: invalid recipe
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /meals:
    post:
      security:
        - bearerAuth: []
      description: add a meal to a user with date and userid
      requestBody:
        description: userid date lunch dinner or breakfast
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createMeal'
      responses:
        201:
          description: created meal
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/createMeal'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    put:
      security:
        - bearerAuth: []
      description: Update meal for user
      requestBody:
        description: userid date lunch dinner or breakfast
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/putMealToUser'
      responses:
        201:
          description: uodated meal
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/putMealToUser'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    get:
      security:
        - bearerAuth: []
      description: retrieve meals that should be displayed on that date
      parameters:
        - in: query
          name: dayof
          schema:
            type: string
          required: true
          description: day
        - in: query
          name: mealsid
          schema:
            type: integer
          required: true
          description: mealsid
        - in: query
          name: firstDay
          schema:
            type: string
          required: false
          description: first day of that week

      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/putMealToUser'
        404:
          description: wrong date
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

components:
  schemas:
    Error:
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
    recipes:
      items:
        $ref: '#/components/schemas/recipesJson'

    recipe:
      properties:
        recipeid:
          type: integer
        dishname:
          type: string
        ingredients:
          type: array
          items:
            type: string
          example: ["str1", "str2", "str3"]
        ingredientAm:
          type: integer
        imageData:
          type: string
        vegan:
          type: boolean
        halal:
          type: boolean
        healthy:
          type: boolean
        kosher:
          type: boolean

    recipesPost:
      properties:
        recipeid:
          type: integer
        dishname:
          type: string
        ingredients:
          type: array
          items:
            type: array
            items:
              type: string
          example: [["egg", "1", "N/A"], ["bacon", "1", "g"], ["cheese", "1", "g"]]
        ingredientAm:
          type: integer
        imageData:
          type: string
        vegan:
          type: boolean
        halal:
          type: boolean
        healthy:
          type: boolean
        kosher:
          type: boolean

    recipesJson:
      properties:
        recipeid:
          type: integer
        dishname:
          type: string
        ingredients:
          type: object
          items:
            type: string
        ingredientAm:
          type: integer
        imageData:
          type: string
        vegan:
          type: boolean
        halal:
          type: boolean
        healthy:
          type: boolean
        kosher:
          type: boolean

    putMealToUser:
      properties:
        mealsid:
          type: integer
        dayof:
          type: string
        changes:
          type: string
        firstDay:
          type: string

    putMealToUserNew:
      properties:
        dayof:
          type: string
        changes:
          type: string

    createMeal:
      properties:
        firstDay:
          type: string
        mealsid:
          type: integer


    Credentials:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
      required:
        - email
        - password

    User:
      type: object
      properties:
        name:
          type: string
        accessToken:
          type: string
      required:
        - name
        - accessToken

    swap:
      properties:
        ingredients:
          type: string
        tradeFor:
          type: array
          items:
            type: string
          example: ["str1", "str2", "str3"]
        veganAlternative:
          type: array
          items:
            type: string
          example: ["str1", "str2", "str3"]


    returnMeal:
      properties:
        firstDay:
          type: string
        mealName:
          type: string
        public:
          type: string
        mealWeek:
          type: string
        mealsid:
          type: integer



  securitySchemes:
    bearerAuth: # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT    # optional, arbitrary value for documentation purposes
